// -------------------------------------------------------------------------------------------------
// <copyright file="ObjectTypeExtensions.cs" company="RHEA System S.A.">
//
//   Copyright 2022 RHEA System S.A.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// </copyright>
// ------------------------------------------------------------------------------------------------

namespace Kalliope.Dal.AutoGenerated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Kalliope.Core;

    public static class ObjectTypeExtensions
    {
        public static IEnumerable<string> DeleteContainedModelThing(this ObjectType poco, Kalliope.DTO.ObjectType dto)
        {
            if (poco == null)
            {
                throw new ArgumentNullException(nameof(poco), $"the {nameof(poco)} may not be null");
            }

            if (dto == null)
            {
                throw new ArgumentNullException(nameof(dto), $"the {nameof(dto)} may not be null");
            }

            var identifiersOfObjectsToDelete = new List<string>();
            
            var abbreviationsToDelete = poco.Abbreviations.Select(x => x.Id).Except(dto.Abbreviations);
            identifiersOfObjectsToDelete.AddRange(abbreviationsToDelete);
            foreach (var identifier in abbreviationsToDelete)
            {
                var nameAlias = poco.Abbreviations.Single(x => x.Id == identifier);
                poco.Abbreviations.Remove(nameAlias);
            }

            if (poco.Cardinality != null && poco.Cardinality.Id != dto.Cardinality)
            {
                identifiersOfObjectsToDelete.Add(poco.Cardinality.Id);
                poco.Cardinality = null;
            }

            if (poco.CompatibleSupertypesError != null && poco.CompatibleSupertypesError.Id != dto.CompatibleSupertypesError)
            {
                identifiersOfObjectsToDelete.Add(poco.CompatibleSupertypesError.Id);
                poco.CompatibleSupertypesError = null;
            }

            if (poco.ConceptualDataType != null && poco.ConceptualDataType.Id != dto.ConceptualDataType)
            {
                identifiersOfObjectsToDelete.Add(poco.ConceptualDataType.Id);
                poco.ConceptualDataType = null;
            }

            if (poco.Definition != null && poco.Definition.Id != dto.Definition)
            {
                identifiersOfObjectsToDelete.Add(poco.Definition.Id);
                poco.Definition = null;
            }

            if (poco.DerivationExpression != null && poco.DerivationExpression.Id != dto.DerivationExpression)
            {
                identifiersOfObjectsToDelete.Add(poco.DerivationExpression.Id);
                poco.DerivationExpression = null;
            }

            if (poco.DerivationRule != null && poco.DerivationRule.Id != dto.DerivationRule)
            {
                identifiersOfObjectsToDelete.Add(poco.DerivationRule.Id);
                poco.DerivationRule = null;
            }

            var entityTypeInstancesToDelete = poco.EntityTypeInstances.Select(x => x.Id).Except(dto.EntityTypeInstances);
            identifiersOfObjectsToDelete.AddRange(entityTypeInstancesToDelete);
            foreach (var identifier in entityTypeInstancesToDelete)
            {
                var entityTypeInstance = poco.EntityTypeInstances.Single(x => x.Id == identifier);
                poco.EntityTypeInstances.Remove(entityTypeInstance);
            }
            
            
            // ImpliedMandatoryConstraint
            // NestedPredicate
            // Note
            // ObjectTypeInstances
            // PreferredIdentifierRequiresMandatoryError
            // ReferenceSchemeError
            // ValueConstraint
            // ValueTypeInstances


            throw new NotImplementedException();
        }
    }
}
